// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuarios
model User {
  id                   Int                   @id @default(autoincrement())
  names                String?
  username             String                @unique
  password             String
  status               String
  roleId               Int // Campo para la relación con Rol
  deleted_at           DateTime?
  // Relaciones
  updatedActHistories  ActHistory[]
  updatedPreCatastrals PreCatastralHistory[]
  role                 Role                  @relation(fields: [roleId], references: [id]) // Relación directa
}

// Modelo de Roles
model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  deleted_at  DateTime?
  // Relaciones
  users       User[]
  permissions RolePermission[]
}

// Modelo de Permisos
model Permission {
  id             Int              @id @default(autoincrement())
  key            String           @unique
  name           String
  description    String
  // Relaciones
  RolePermission RolePermission[]
}

// Tabla intermedia explícita para Role-Permission
model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  // Relaciones
  Role         Role       @relation(fields: [roleId], references: [id])
  Permission   Permission @relation(fields: [permissionId], references: [id])
}

// Modelo de Clientes
model Customer {
  id            Int            @id @default(autoincrement())
  inscription   String
  address       String
  customer_name String
  old_meter     String
  observation   String
  // Relaciones
  acts          Act[]
  preCatastrals PreCatastral[]
}

// Modelo de Técnicos
model Technician {
  id            Int            @id @default(autoincrement())
  dni           String
  name          String
  deleted_at    DateTime?
  // Relaciones
  acts          Act[]
  preCatastrals PreCatastral[]
}

// Modelo de Renovación de Medidores
model MeterRenovation {
  id                Int    @id @default(autoincrement())
  meter_number      String
  verification_code String
  // Relaciones
  acts              Act[]
}

model Lot {
  id            Int            @id @default(autoincrement())
  name          String
  start_date    DateTime       @db.Date
  end_date      DateTime       @db.Date
  status        String
  deleted_at    DateTime?
  // Relaciones
  acts          Act[]
  Labeled       Labeled[]
  PreCatastrals PreCatastral[]
}

model Labeled {
  id         Int            @id @default(autoincrement())
  name       String         @unique
  lotId      Int
  deleted_at DateTime?
  createdAt  DateTime       @default(now())
  // Relaciones
  meters     MeterLabeled[]
  lot        Lot            @relation(fields: [lotId], references: [id])
}

model MeterLabeled {
  id        Int     @id @default(autoincrement())
  old_meter String
  reading   String
  labeledId Int
  // Relaciones
  labeled   Labeled @relation(fields: [labeledId], references: [id])
}

// Modelo de Actas
model Act {
  id                           Int              @id @default(autoincrement())
  lotId                        Int
  file_number                  String
  file_date                    DateTime         @db.Date
  file_time                    DateTime?        @db.Time
  meterrenovationId            Int?
  reading                      String?
  observations                 String
  rotating_pointer             String
  meter_security_seal          String
  reading_impossibility_viewer String
  customerId                   Int
  technicianId                 Int
  deleted_at                   DateTime?
  // Relaciones
  histories                    ActHistory[]
  lot                          Lot              @relation(fields: [lotId], references: [id])
  customer                     Customer         @relation(fields: [customerId], references: [id])
  technician                   Technician       @relation(fields: [technicianId], references: [id])
  meter                        MeterRenovation? @relation(fields: [meterrenovationId], references: [id])
}

// Modelo de Historial de Actas
model ActHistory {
  id         Int      @id @default(autoincrement())
  actId      Int
  action     String // CREATE, UPDATE, DELETE
  details    String?
  updated_by Int
  labeledId  Int?
  updated_at DateTime @default(now())
  // Relaciones
  act        Act      @relation(fields: [actId], references: [id])
  user       User     @relation(fields: [updated_by], references: [id])
}

// Modelo de Precatastrales
model PreCatastral {
  id                Int                   @id @default(autoincrement())
  lotId             Int
  file_number       String
  property          String
  located_box       String
  buried_connection String
  has_meter         String
  reading           String?
  has_cover         String
  cover_state       String
  has_box           String
  box_state         String
  keys              String
  cover_material    String
  observations      String
  customerId        Int
  technicianId      Int
  is_located        String
  deleted_at        DateTime?
  // Relaciones
  histories         PreCatastralHistory[]
  lot               Lot                   @relation(fields: [lotId], references: [id])
  customer          Customer              @relation(fields: [customerId], references: [id])
  technician        Technician            @relation(fields: [technicianId], references: [id])
}

// Modelo de Historial de Precatastrales
model PreCatastralHistory {
  id             Int          @id @default(autoincrement())
  preCatastralId Int
  action         String // CREATE, UPDATE, DELETE
  details        String?
  updated_by     Int
  updated_at     DateTime     @default(now())
  // Relaciones
  user           User         @relation(fields: [updated_by], references: [id])
  preCatastral   PreCatastral @relation(fields: [preCatastralId], references: [id])
}
